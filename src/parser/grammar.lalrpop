use std::str::FromStr;
use chrono::prelude::*;
use crate::parser::ast::{
    KiCADSchema,
    SchemaNode,
    Component,
    EncodeKind,
    HeaderKind,
    Connection,
    Wire,
    Coords,
    Text,
    WireType
};

grammar;

pub Grammar: KiCADSchema = {
    <h:HeaderCollection> <n:NodeColllection> => KiCADSchema { headers: h, body: n }
}

HeaderCollection: Vec<HeaderKind> = {
    ( HeaderKindSwitch )*
}

NodeColllection: Vec<SchemaNode> = {
    ( NodeAlt )*
}

HeaderKindSwitch: HeaderKind = {
    "EESchema Schematic File Version" <Numu8Const> => HeaderKind::DumpVersion(<>),
    "Date" "\"" <DashDate> "\"" => HeaderKind::LastUpdated(<>),
    "Title" <StringConst> => HeaderKind::DumpName(<>),
    <EncodingTypeSwitch> => HeaderKind::Encoding(<>),
}

DashDate: Date<Utc> = {
    <y:Numi32Const> "-" <m:Numi32Const> "-" <d:Numi32Const> => Utc.ymd(y, m as u32, d as u32)
}

EncodingTypeSwitch: EncodeKind = {
    "encoding" "utf-8" => EncodeKind::UTF8,
}

NodeAlt: SchemaNode = {
    <ConnectionDecl> => SchemaNode::Connection(<>),
    <WireDecl> => SchemaNode::Wire(<>),
    <TextDecl> => SchemaNode::Text(<>)
}

TextDecl: Text = {
    "Text" "Label" <c:CoordDecl> => Text { pos: c, content: unimplemented!() }
}

ComponentDecl: Component = {
    "$Comp" <n:CompName> <p:CompPos> "$EndComp" => Component { name: n, pos: p }
}

CompName: (String, String) = {
    "L" <StringSepColon>
}

CompPos: Coords = {
    "P" <CoordDecl>
}

StringSepColon: (String, String) = {
    <Name> ":" <Name>
}

WireDecl: Wire = {
    "Wire" "Wire" "Line" <s:CoordDecl> <e:CoordDecl> => Wire { ty: WireType::Wire, start: s, end: e },
    "Wire" "Bus" "Line" <s:CoordDecl> <e:CoordDecl> => Wire { ty: WireType::Bus, start: s, end: e },
    "Wire" "Notes" "Line" <s:CoordDecl> <e:CoordDecl> => Wire { ty: WireType::Note, start: s, end: e }
}

ConnectionDecl: Connection = {
    "Connection" "~" <c:CoordDecl> => Connection { pos: c }
}

CoordDecl: Coords = {
    <x:Numi32Const> <y:Numi32Const> => Coords { x, y }
}

StringConst: String = {
    "\"" <Name> "\""
}

Name: String = {
    <v:r"([A-Z]|[a-z])[0-9A-Za-z]*"> => v.to_string(),
}

Numu8Const: u8 = {
    <Numi32Const> => <> as u8
}

Numi32Const: i32 = r"(\-?)[0-9]+" => i32::from_str(<>).unwrap();
